#!/usr/bin/env python3

import getpass
import smtplib
import os
import sys
import configparser
import subprocess
from importlib.metadata import version, PackageNotFoundError
from rich import print
from email.mime.text import MIMEText
from email.mime.multipart import MIMEMultipart
from config import get_language_preference, create_smtp_config_interactive, load_smtp_config
from utils import print_header
import tomli

# Dictionnaire des traductions
TRANSLATIONS = {
    "fr": {
        "welcome": "üéâ Bienvenue dans OpenStack Toolbox üß∞ v{} üéâ",
        "config_needed": "üõ†Ô∏è Configuration initiale SMTP n√©cessaire.",
        "enter_info": "Merci de saisir les informations demand√©es pour configurer l'envoi d'e-mails.\n",
        "gmail_warning": "‚ö†Ô∏è Pour Gmail, vous devez activer la validation en 2 √©tapes et cr√©er un mot de passe d'application.",
        "gmail_help": "Voici la page d'aide Google : https://support.google.com/accounts/answer/185833",
        "gmail_app_password": "‚ö†Ô∏è Pour Gmail, utilisez un mot de passe d'application, pas votre mot de passe habituel.",
        "smtp_server": "SMTP server (ex: smtp.gmail.com): ",
        "smtp_port": "SMTP port (ex: 587): ",
        "smtp_username": "SMTP username (votre login email): ",
        "smtp_password": "SMTP password (mot de passe email ou mot de passe d'application Gmail) : ",
        "to_email": "Adresse e-mail destinataire : ",
        "config_saved": "‚úÖ Configuration sauvegard√©e dans",
        "smtp_missing": "‚ùå Section [SMTP] manquante dans le fichier de configuration.",
        "report_not_found": "‚ùå Le fichier openstack_optimization_report.txt est introuvable.",
        "smtp_incomplete": "‚ùå La configuration SMTP est incompl√®te dans le fichier de configuration.",
        "generating_report": "üìù G√©n√©ration du rapport hebdomadaire...",
        "email_sent": "‚úÖ Email envoy√© avec succ√®s.",
        "report_missing": "‚ùå Le fichier de rapport est introuvable.",
        "email_error": "‚ùå Erreur lors de l'envoi de l'email : {}",
        "check_smtp": "üí° V√©rifiez que votre configuration SMTP est correcte.",
        "reconfigure": "Souhaitez-vous reconfigurer maintenant et envoyer un e-mail test ? (o/n)",
        "test_email_sent": "üì¨ E-mail test envoy√© avec succ√®s.",
        "test_email_failed": "‚ùå L'envoi de l'e-mail test a √©chou√© : {}",
        "check_credentials": "‚ÑπÔ∏è Veuillez v√©rifier vos identifiants ou param√®tres SMTP.",
        "retry_later": "‚ÑπÔ∏è Vous pouvez relancer ce script plus tard apr√®s correction de la configuration.",
        "setup_weekly": "üíå Voulez-vous param√©trer l'envoi hebdomadaire automatique par email ? (o/n)",
        "cron_exists": "‚ÑπÔ∏è La t√¢che cron existe d√©j√†.",
        "cron_added": "‚úÖ T√¢che cron ajout√©e : vous recevrez un email tous les lundis √† 8h.",
        "cron_cancelled": "‚ùå Configuration de la t√¢che cron annul√©e.",
        "email_subject": "Rapport hebdomadaire : Infomaniak Openstack Optimisation",
        "test_email_subject": "Test SMTP - OpenStack Toolbox",
        "test_email_body": "‚úÖ Ceci est un e-mail test de la configuration SMTP."
    },
    "en": {
        "welcome": "üéâ Welcome to OpenStack Toolbox üß∞ v{} üéâ",
        "config_needed": "üõ†Ô∏è Initial SMTP configuration needed.",
        "enter_info": "Please enter the requested information to configure email sending.\n",
        "gmail_warning": "‚ö†Ô∏è For Gmail, you need to enable 2-step verification and create an app password.",
        "gmail_help": "Here's the Google help page: https://support.google.com/accounts/answer/185833",
        "gmail_app_password": "‚ö†Ô∏è For Gmail, use an app password, not your regular password.",
        "smtp_server": "SMTP server (e.g., smtp.gmail.com): ",
        "smtp_port": "SMTP port (e.g., 587): ",
        "smtp_username": "SMTP username (your email login): ",
        "smtp_password": "SMTP password (email password or Gmail app password): ",
        "to_email": "Recipient email address: ",
        "config_saved": "‚úÖ Configuration saved in",
        "smtp_missing": "‚ùå [SMTP] section missing in configuration file.",
        "report_not_found": "‚ùå The file openstack_optimization_report.txt was not found.",
        "smtp_incomplete": "‚ùå SMTP configuration is incomplete in the configuration file.",
        "generating_report": "üìù Generating weekly report...",
        "email_sent": "‚úÖ Email sent successfully.",
        "report_missing": "‚ùå Report file not found.",
        "email_error": "‚ùå Error sending email: {}",
        "check_smtp": "üí° Please check your SMTP configuration.",
        "reconfigure": "Would you like to reconfigure now and send a test email? (y/n)",
        "test_email_sent": "üì¨ Test email sent successfully.",
        "test_email_failed": "‚ùå Test email sending failed: {}",
        "check_credentials": "‚ÑπÔ∏è Please verify your SMTP credentials and settings.",
        "retry_later": "‚ÑπÔ∏è You can run this script again later after fixing the configuration.",
        "setup_weekly": "üíå Would you like to set up automatic weekly email sending? (y/n)",
        "cron_exists": "‚ÑπÔ∏è Cron task already exists.",
        "cron_added": "‚úÖ Cron task added: you will receive an email every Monday at 8 AM.",
        "cron_cancelled": "‚ùå Cron task configuration cancelled.",
        "email_subject": "Weekly Report: Infomaniak Openstack Optimization",
        "test_email_subject": "SMTP Test - OpenStack Toolbox",
        "test_email_body": "‚úÖ This is a test email from the SMTP configuration."
    }
}

def get_version():
    """
    R√©cup√®re la version du projet depuis le fichier pyproject.toml.
    
    Returns:
        str: Version du projet ou "unknown" si non trouv√©e
        
    Examples:
        >>> get_version()
        '1.2.0'
    """
    pyproject_path = os.path.join(os.path.dirname(__file__), "..", "pyproject.toml")
    pyproject_path = os.path.abspath(pyproject_path)

    try:
        with open(pyproject_path, "rb") as f:
            pyproject_data = tomli.load(f)
        version = pyproject_data.get("project", {}).get("version", "unknown")
    except Exception as e:
        version = "unknown"
    return version

def generate_report():
    """
    G√©n√®re un rapport hebdomadaire des ressources OpenStack.
    
    Le rapport inclut :
    - Liste des instances
    - Utilisation des ressources
    - Co√ªts estim√©s
    - Recommandations d'optimisation
    
    Returns:
        str: Contenu du rapport au format HTML
        
    Examples:
        >>> report = generate_report()
        >>> print(report[:100])  # Affiche le d√©but du rapport
        <!DOCTYPE html>
        <html>
        <head>
            <title>Rapport hebdomadaire OpenStack</title>
    """
    # Ex√©cuter openstack_summary.py pour g√©n√©rer le rapport
    try:
        result = subprocess.run(
            [sys.executable, os.path.join(os.path.dirname(__file__), "openstack_summary.py")],
            capture_output=True,
            text=True
        )
        return result.stdout
    except Exception as e:
        return f"Erreur lors de la g√©n√©ration du rapport : {str(e)}"

def send_email(smtp_config, subject, body):
    """
    Envoie un email via SMTP avec le rapport hebdomadaire.
    
    Args:
        smtp_config (dict): Configuration SMTP avec les cl√©s :
            - server: Serveur SMTP
            - port: Port SMTP
            - username: Nom d'utilisateur
            - password: Mot de passe
            - from_email: Email exp√©diteur
            - to_email: Email destinataire
        subject (str): Sujet de l'email
        body (str): Corps de l'email (HTML)
        
    Returns:
        bool: True si l'email a √©t√© envoy√© avec succ√®s, False sinon
        
    Examples:
        >>> config = load_smtp_config()
        >>> if config:
        ...     success = send_email(
        ...         config,
        ...         "Test SMTP",
        ...         "<h1>Test</h1><p>Ceci est un test.</p>"
        ...     )
        ...     print("Email envoy√©" if success else "√âchec")
    """
    try:
        msg = MIMEMultipart()
        msg['From'] = smtp_config['from_email']
        msg['To'] = smtp_config['to_email']
        msg['Subject'] = subject

        msg.attach(MIMEText(body, 'html'))

        with smtplib.SMTP(smtp_config['server'], smtp_config['port']) as server:
            server.starttls()
            server.login(smtp_config['username'], smtp_config['password'])
            server.send_message(msg)
        return True
    except Exception as e:
        print(f"[bold red]‚ùå Erreur lors de l'envoi de l'email : {str(e)}[/]")
        return False

def setup_cron():
    """
    Configure une t√¢che cron pour l'envoi hebdomadaire du rapport.
    
    La t√¢che est configur√©e pour s'ex√©cuter tous les lundis √† 8h00.
    
    Returns:
        bool: True si la t√¢che cron a √©t√© configur√©e avec succ√®s, False sinon
        
    Examples:
        >>> if setup_cron():
        ...     print("T√¢che cron configur√©e")
        ... else:
        ...     print("√âchec de la configuration")
    """
    lang = get_language_preference()
    try:
        script_path = os.path.abspath(__file__)
        cron_cmd = f"0 8 * * 1 {sys.executable} {script_path}"
        
        # Lire le crontab actuel
        result = subprocess.run(['crontab', '-l'], capture_output=True, text=True)
        if result.returncode == 0:
            current_crontab = result.stdout
        else:
            current_crontab = ""
        
        # V√©rifier si la t√¢che existe d√©j√†
        if script_path in current_crontab:
            print(f"[yellow]{TRANSLATIONS[lang]['cron_exists']}[/]")
            return True
        
        # Ajouter la nouvelle t√¢che
        new_crontab = current_crontab.strip() + f"\n{cron_cmd}\n"
        
        # √âcrire le nouveau crontab
        process = subprocess.Popen(['crontab', '-'], stdin=subprocess.PIPE)
        process.communicate(input=new_crontab.encode())
        
        if process.returncode == 0:
            print(f"[green]{TRANSLATIONS[lang]['cron_added']}[/]")
            return True
        else:
            print(f"[red]{TRANSLATIONS[lang]['cron_cancelled']}[/]")
            return False
            
    except Exception as e:
        print(f"[red]{TRANSLATIONS[lang]['cron_exception'].format(str(e))}[/]")
        return False

def main():
    """
    Fonction principale du script de notification hebdomadaire.
    
    Cette fonction :
    1. V√©rifie la configuration SMTP
    2. G√©n√®re le rapport hebdomadaire
    3. Envoie le rapport par email
    4. Configure la t√¢che cron si n√©cessaire
    
    Examples:
        >>> if __name__ == "__main__":
        ...     main()
    """
    lang = get_language_preference()
    version = get_version()

    print(f"\n[bold yellow]{TRANSLATIONS[lang]['welcome'].format(version)}[/]")
    print_header("WEEKLY NOTIFICATION")

    # V√©rifier/cr√©er la configuration SMTP
    smtp_config = load_smtp_config()
    if not smtp_config:
        if not create_smtp_config_interactive():
            return
        smtp_config = load_smtp_config()
        if not smtp_config:
            return

    # G√©n√©rer et envoyer le rapport
    print(f"[bold cyan]{TRANSLATIONS[lang]['generating_report']}[/]")
    email_body = generate_report()
    print(email_body)

    # Envoyer l'email
    if send_email(smtp_config, TRANSLATIONS[lang]['test_email_subject'], email_body):
        print(f"[bold green]{TRANSLATIONS[lang]['email_sent']}[/]")
    else:
        print(f"[bold red]{TRANSLATIONS[lang]['email_error']}[/]")
        return

    # Configurer la t√¢che cron
    setup_cron()

if __name__ == "__main__":
    main()